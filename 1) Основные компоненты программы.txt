1) Основные компоненты программы:
Сигналы: Программа использует сигналы SIGUSR1, SIGUSR2 и реальные сигналы (сигналы от SIGRTMIN до SIGRTMAX) для обмена информацией между процессами.
Процесс "угадыватель" генерирует случайные числа и пытается угадать число, загаданный процессом "загадчик".
----------------

2) Глобальные переменные:
volatile sig_atomic_t guessed = 0;
volatile sig_atomic_t target = 0;

- Guessed — флаг, который указывает, угадано ли число.
- Target — переменная, в которой хранится полученное число от угадывателя, которое он отправил в процесс-загадчик.
Флаг volatile sig_atomic_t используется для обеспечения правильного обращения с этими переменными в обработчиках сигналов.
----------------

3) Обработчик сигналов: 
void signal_handler(int sig, siginfo_t *info, void *context) {
    if (sig == SIGUSR1) {
        guessed = 1; // Угадал
    } else if (sig == SIGUSR2) {
        guessed = 0; // Не угадал
    } else if (sig >= SIGRTMIN && sig <= SIGRTMAX) {
        target = info->si_value.sival_int; // Получить число
    }
}

Обработчик сигналов (signal_handler) перехватывает сигналы:
- SIGUSR1 — сигнал от загадчика, что угадыватель угадал число.
- SIGUSR2 — сигнал, что угадыватель не угадал число.
- Сигналы из диапазона реальных сигналов (SIGRTMIN-SIGRTMAX) содержат информацию о предполагаемом числе угадывателя. Эта информация передается через si_value.Sival_int.
----------------

4) Функция "угадыватель":
void play_as_guesser(pid_t other_pid, int range) {
    int guess;
    union sigval value;

    srand(getpid());

    while (1) {
        guess = rand() % range + 1;
        value.sival_int = guess;

        printf("Игрок-угадыватель: Предполагаю число %d\n", guess);
        sigqueue(other_pid, SIGRTMIN, value);

        pause();

        if (guessed) {
            printf("Игрок-угадыватель: Угадал число %d!\n", guess);
            break;
        } else {
            printf("Игрок-угадыватель: Число %d неверное, пробую снова.\n", guess);
        }
    }
}

- Функция play_as_guesser представляет поведение угадывателя.
- Сначала инициализируется генератор случайных чисел с помощью srand(getpid()), чтобы числа были случайными, зависящими от идентификатора процесса.
- В цикле угадыватель генерирует случайное число в пределах диапазона от 1 до range.
- Это число отправляется загадчику через сигнал с помощью sigqueue, где используется SIGRTMIN и передается значение через value.sival_int.
- Функция pause() приостанавливает выполнение процесса, ожидая сигнала (от загадчика).
- После получения сигнала угадыватель проверяет значение переменной guessed. Если это значение установлено в 1 (что означает, что число угадано), он завершает игру. Иначе, процесс продолжает угадывать новое число.
----------------

5) Функция "загадчик":
void play_as_host(pid_t other_pid, int range) {
    srand(getpid());
    int target_number = rand() % range + 1;
    int received_guess;

    printf("Игрок-загадчик: Загадал число %d\n", target_number);

    while (1) {
        pause();

        received_guess = target;
        printf("Игрок-загадчик: Получено число %d\n", received_guess);

        if (received_guess == target_number) {
            printf("Игрок-загадчик: Число %d угадано!\n", received_guess);
            kill(other_pid, SIGUSR1); // Угадал
            break;
        } else {
            kill(other_pid, SIGUSR2); // Не угадал
        }
    }
}

- Функция play_as_host представляет поведение загадчика.
- Загадчик генерирует случайное число target_number в пределах диапазона от 1 до range.
- В цикле загадчик ожидает сигнала от угадывателя, чтобы получить предполагаемое число.
- Как только получено число (received_guess), оно сравнивается с загадом числом:
	Если угадано верно, отправляется сигнал SIGUSR1 (угадал).
	Если неверно, отправляется сигнал SIGUSR2 (не угадал).
- Игра продолжается до тех пор, пока угадыватель не угадает число.
----------------

6) Функция "main":
int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Использование: %s <диапазон>\n", argv[0]);
        return 1;
    }

    int range = atoi(argv[1]);
    if (range <= 0) {
        fprintf(stderr, "Диапазон должен быть положительным числом.\n");
        return 1;
    }

    struct sigaction sa;
    sa.sa_flags = SA_SIGINFO;
    sa.sa_sigaction = signal_handler;
    sigemptyset(&sa.sa_mask);

    sigaction(SIGUSR1, &sa, NULL);
    sigaction(SIGUSR2, &sa, NULL);
    sigaction(SIGRTMIN, &sa, NULL);

    pid_t pid = fork();

    if (pid < 0) {
        perror("Ошибка вызова fork");
        return 1;
    } else if (pid == 0) {
        // Дочерний процесс: угадыватель
        play_as_guesser(getppid(), range);
    } else {
        // Родительский процесс: загадчик
        play_as_host(pid, range);
    }

    return 0;
}

- В main проверяется, что передан аргумент командной строки — диапазон чисел, в котором будут загадываться и угадываться числа.
- Далее, настраиваются обработчики сигналов:
	SIGUSR1, SIGUSR2, SIGRTMIN — для обработки сигналов от процессов.
- Процесс fork() порождает два процесса: родительский (загадчик) и дочерний (угадыватель).
- В дочернем процессе выполняется функция play_as_guesser, а в родительском — play_as_host.